# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class AlarmControllerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ack_alarm_using_post(self, alarm_id, **kwargs):
        """
        ackAlarm
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ack_alarm_using_post(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ack_alarm_using_post_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.ack_alarm_using_post_with_http_info(alarm_id, **kwargs)
            return data

    def ack_alarm_using_post_with_http_info(self, alarm_id, **kwargs):
        """
        ackAlarm
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ack_alarm_using_post_with_http_info(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ack_alarm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `ack_alarm_using_post`")


        collection_formats = {}

        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm/{alarmId}/ack', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clear_alarm_using_post(self, alarm_id, **kwargs):
        """
        clearAlarm
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clear_alarm_using_post(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.clear_alarm_using_post_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.clear_alarm_using_post_with_http_info(alarm_id, **kwargs)
            return data

    def clear_alarm_using_post_with_http_info(self, alarm_id, **kwargs):
        """
        clearAlarm
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clear_alarm_using_post_with_http_info(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_alarm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `clear_alarm_using_post`")


        collection_formats = {}

        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm/{alarmId}/clear', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_alarm_by_id_using_get(self, alarm_id, **kwargs):
        """
        getAlarmById
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alarm_by_id_using_get(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alarm_by_id_using_get_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.get_alarm_by_id_using_get_with_http_info(alarm_id, **kwargs)
            return data

    def get_alarm_by_id_using_get_with_http_info(self, alarm_id, **kwargs):
        """
        getAlarmById
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alarm_by_id_using_get_with_http_info(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarm_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `get_alarm_by_id_using_get`")


        collection_formats = {}

        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm/{alarmId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Alarm',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_alarm_info_by_id_using_get(self, alarm_id, **kwargs):
        """
        getAlarmInfoById
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alarm_info_by_id_using_get(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: AlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alarm_info_by_id_using_get_with_http_info(alarm_id, **kwargs)
        else:
            (data) = self.get_alarm_info_by_id_using_get_with_http_info(alarm_id, **kwargs)
            return data

    def get_alarm_info_by_id_using_get_with_http_info(self, alarm_id, **kwargs):
        """
        getAlarmInfoById
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alarm_info_by_id_using_get_with_http_info(alarm_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str alarm_id: alarmId (required)
        :return: AlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarm_info_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm_id' is set
        if ('alarm_id' not in params) or (params['alarm_id'] is None):
            raise ValueError("Missing the required parameter `alarm_id` when calling `get_alarm_info_by_id_using_get`")


        collection_formats = {}

        path_params = {}
        if 'alarm_id' in params:
            path_params['alarmId'] = params['alarm_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm/info/{alarmId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AlarmInfo',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_alarms_using_get(self, entity_type, entity_id, limit, **kwargs):
        """
        getAlarms
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alarms_using_get(entity_type, entity_id, limit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param int limit: limit (required)
        :param str search_status: searchStatus
        :param str status: status
        :param int start_time: startTime
        :param int end_time: endTime
        :param bool asc_order: ascOrder
        :param str offset: offset
        :param bool fetch_originator: fetchOriginator
        :return: TimePageDataAlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alarms_using_get_with_http_info(entity_type, entity_id, limit, **kwargs)
        else:
            (data) = self.get_alarms_using_get_with_http_info(entity_type, entity_id, limit, **kwargs)
            return data

    def get_alarms_using_get_with_http_info(self, entity_type, entity_id, limit, **kwargs):
        """
        getAlarms
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alarms_using_get_with_http_info(entity_type, entity_id, limit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param int limit: limit (required)
        :param str search_status: searchStatus
        :param str status: status
        :param int start_time: startTime
        :param int end_time: endTime
        :param bool asc_order: ascOrder
        :param str offset: offset
        :param bool fetch_originator: fetchOriginator
        :return: TimePageDataAlarmInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'entity_id', 'limit', 'search_status', 'status', 'start_time', 'end_time', 'asc_order', 'offset', 'fetch_originator']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alarms_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params) or (params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `get_alarms_using_get`")
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_alarms_using_get`")
        # verify the required parameter 'limit' is set
        if ('limit' not in params) or (params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_alarms_using_get`")


        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']

        query_params = []
        if 'search_status' in params:
            query_params.append(('searchStatus', params['search_status']))
        if 'status' in params:
            query_params.append(('status', params['status']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))
        if 'asc_order' in params:
            query_params.append(('ascOrder', params['asc_order']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'fetch_originator' in params:
            query_params.append(('fetchOriginator', params['fetch_originator']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm/{entityType}/{entityId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TimePageDataAlarmInfo',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_highest_alarm_severity_using_get(self, entity_type, entity_id, **kwargs):
        """
        getHighestAlarmSeverity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_highest_alarm_severity_using_get(entity_type, entity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param str search_status: searchStatus
        :param str status: status
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_highest_alarm_severity_using_get_with_http_info(entity_type, entity_id, **kwargs)
        else:
            (data) = self.get_highest_alarm_severity_using_get_with_http_info(entity_type, entity_id, **kwargs)
            return data

    def get_highest_alarm_severity_using_get_with_http_info(self, entity_type, entity_id, **kwargs):
        """
        getHighestAlarmSeverity
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_highest_alarm_severity_using_get_with_http_info(entity_type, entity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity_type: entityType (required)
        :param str entity_id: entityId (required)
        :param str search_status: searchStatus
        :param str status: status
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'entity_id', 'search_status', 'status']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_highest_alarm_severity_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params) or (params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `get_highest_alarm_severity_using_get`")
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_highest_alarm_severity_using_get`")


        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']

        query_params = []
        if 'search_status' in params:
            query_params.append(('searchStatus', params['search_status']))
        if 'status' in params:
            query_params.append(('status', params['status']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm/highestSeverity/{entityType}/{entityId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_alarm_using_post(self, alarm, **kwargs):
        """
        saveAlarm
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.save_alarm_using_post(alarm, async=True)
        >>> result = thread.get()

        :param async bool
        :param Alarm alarm: alarm (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.save_alarm_using_post_with_http_info(alarm, **kwargs)
        else:
            (data) = self.save_alarm_using_post_with_http_info(alarm, **kwargs)
            return data

    def save_alarm_using_post_with_http_info(self, alarm, **kwargs):
        """
        saveAlarm
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.save_alarm_using_post_with_http_info(alarm, async=True)
        >>> result = thread.get()

        :param async bool
        :param Alarm alarm: alarm (required)
        :return: Alarm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alarm']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_alarm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alarm' is set
        if ('alarm' not in params) or (params['alarm'] is None):
            raise ValueError("Missing the required parameter `alarm` when calling `save_alarm_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'alarm' in params:
            body_params = params['alarm']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/alarm', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Alarm',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
