# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class DeviceApiControllerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_device_attributes_using_get(self, device_token, **kwargs):
        """
        getDeviceAttributes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_attributes_using_get(device_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str client_keys: clientKeys
        :param str shared_keys: sharedKeys
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_device_attributes_using_get_with_http_info(device_token, **kwargs)
        else:
            (data) = self.get_device_attributes_using_get_with_http_info(device_token, **kwargs)
            return data

    def get_device_attributes_using_get_with_http_info(self, device_token, **kwargs):
        """
        getDeviceAttributes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_device_attributes_using_get_with_http_info(device_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str client_keys: clientKeys
        :param str shared_keys: sharedKeys
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'client_keys', 'shared_keys']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_attributes_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `get_device_attributes_using_get`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = []
        if 'client_keys' in params:
            query_params.append(('clientKeys', params['client_keys']))
        if 'shared_keys' in params:
            query_params.append(('sharedKeys', params['shared_keys']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/attributes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_device_attributes_using_post(self, device_token, json, **kwargs):
        """
        postDeviceAttributes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_device_attributes_using_post(device_token, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_device_attributes_using_post_with_http_info(device_token, json, **kwargs)
        else:
            (data) = self.post_device_attributes_using_post_with_http_info(device_token, json, **kwargs)
            return data

    def post_device_attributes_using_post_with_http_info(self, device_token, json, **kwargs):
        """
        postDeviceAttributes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_device_attributes_using_post_with_http_info(device_token, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'json']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_device_attributes_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `post_device_attributes_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_device_attributes_using_post`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/attributes', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_rpc_request_using_post(self, device_token, json, **kwargs):
        """
        postRpcRequest
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_rpc_request_using_post(device_token, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_rpc_request_using_post_with_http_info(device_token, json, **kwargs)
        else:
            (data) = self.post_rpc_request_using_post_with_http_info(device_token, json, **kwargs)
            return data

    def post_rpc_request_using_post_with_http_info(self, device_token, json, **kwargs):
        """
        postRpcRequest
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_rpc_request_using_post_with_http_info(device_token, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'json']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rpc_request_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `post_rpc_request_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_rpc_request_using_post`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/rpc', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_telemetry_using_post(self, device_token, json, **kwargs):
        """
        postTelemetry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_telemetry_using_post(device_token, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_telemetry_using_post_with_http_info(device_token, json, **kwargs)
        else:
            (data) = self.post_telemetry_using_post_with_http_info(device_token, json, **kwargs)
            return data

    def post_telemetry_using_post_with_http_info(self, device_token, json, **kwargs):
        """
        postTelemetry
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_telemetry_using_post_with_http_info(device_token, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'json']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_telemetry_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `post_telemetry_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `post_telemetry_using_post`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/telemetry', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def reply_to_command_using_post(self, device_token, request_id, json, **kwargs):
        """
        replyToCommand
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reply_to_command_using_post(device_token, request_id, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param int request_id: requestId (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.reply_to_command_using_post_with_http_info(device_token, request_id, json, **kwargs)
        else:
            (data) = self.reply_to_command_using_post_with_http_info(device_token, request_id, json, **kwargs)
            return data

    def reply_to_command_using_post_with_http_info(self, device_token, request_id, json, **kwargs):
        """
        replyToCommand
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.reply_to_command_using_post_with_http_info(device_token, request_id, json, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param int request_id: requestId (required)
        :param str json: json (required)
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'request_id', 'json']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reply_to_command_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `reply_to_command_using_post`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `reply_to_command_using_post`")
        # verify the required parameter 'json' is set
        if ('json' not in params) or (params['json'] is None):
            raise ValueError("Missing the required parameter `json` when calling `reply_to_command_using_post`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'json' in params:
            body_params = params['json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/rpc/{requestId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_to_attributes_using_get(self, device_token, **kwargs):
        """
        subscribeToAttributes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscribe_to_attributes_using_get(device_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.subscribe_to_attributes_using_get_with_http_info(device_token, **kwargs)
        else:
            (data) = self.subscribe_to_attributes_using_get_with_http_info(device_token, **kwargs)
            return data

    def subscribe_to_attributes_using_get_with_http_info(self, device_token, **kwargs):
        """
        subscribeToAttributes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscribe_to_attributes_using_get_with_http_info(device_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'timeout']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_to_attributes_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `subscribe_to_attributes_using_get`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/attributes/updates', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def subscribe_to_commands_using_get(self, device_token, **kwargs):
        """
        subscribeToCommands
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscribe_to_commands_using_get(device_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.subscribe_to_commands_using_get_with_http_info(device_token, **kwargs)
        else:
            (data) = self.subscribe_to_commands_using_get_with_http_info(device_token, **kwargs)
            return data

    def subscribe_to_commands_using_get_with_http_info(self, device_token, **kwargs):
        """
        subscribeToCommands
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.subscribe_to_commands_using_get_with_http_info(device_token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_token: deviceToken (required)
        :param int timeout: timeout
        :return: DeferredResultResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_token', 'timeout']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method subscribe_to_commands_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_token' is set
        if ('device_token' not in params) or (params['device_token'] is None):
            raise ValueError("Missing the required parameter `device_token` when calling `subscribe_to_commands_using_get`")


        collection_formats = {}

        path_params = {}
        if 'device_token' in params:
            path_params['deviceToken'] = params['device_token']

        query_params = []
        if 'timeout' in params:
            query_params.append(('timeout', params['timeout']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/v1/{deviceToken}/rpc', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeferredResultResponseEntity',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
