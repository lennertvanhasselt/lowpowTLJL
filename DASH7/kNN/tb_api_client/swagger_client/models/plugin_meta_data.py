# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PluginMetaData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_info': 'str',
        'api_token': 'str',
        'clazz': 'str',
        'configuration': 'str',
        'created_time': 'int',
        'id': 'PluginId',
        'name': 'str',
        'public_access': 'bool',
        'state': 'str',
        'tenant_id': 'TenantId'
    }

    attribute_map = {
        'additional_info': 'additionalInfo',
        'api_token': 'apiToken',
        'clazz': 'clazz',
        'configuration': 'configuration',
        'created_time': 'createdTime',
        'id': 'id',
        'name': 'name',
        'public_access': 'publicAccess',
        'state': 'state',
        'tenant_id': 'tenantId'
    }

    def __init__(self, additional_info=None, api_token=None, clazz=None, configuration=None, created_time=None, id=None, name=None, public_access=None, state=None, tenant_id=None):
        """
        PluginMetaData - a model defined in Swagger
        """

        self._additional_info = None
        self._api_token = None
        self._clazz = None
        self._configuration = None
        self._created_time = None
        self._id = None
        self._name = None
        self._public_access = None
        self._state = None
        self._tenant_id = None
        self.discriminator = None

        if additional_info is not None:
          self.additional_info = additional_info
        if api_token is not None:
          self.api_token = api_token
        if clazz is not None:
          self.clazz = clazz
        if configuration is not None:
          self.configuration = configuration
        if created_time is not None:
          self.created_time = created_time
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if public_access is not None:
          self.public_access = public_access
        if state is not None:
          self.state = state
        if tenant_id is not None:
          self.tenant_id = tenant_id

    @property
    def additional_info(self):
        """
        Gets the additional_info of this PluginMetaData.

        :return: The additional_info of this PluginMetaData.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """
        Sets the additional_info of this PluginMetaData.

        :param additional_info: The additional_info of this PluginMetaData.
        :type: str
        """

        self._additional_info = additional_info

    @property
    def api_token(self):
        """
        Gets the api_token of this PluginMetaData.

        :return: The api_token of this PluginMetaData.
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """
        Sets the api_token of this PluginMetaData.

        :param api_token: The api_token of this PluginMetaData.
        :type: str
        """

        self._api_token = api_token

    @property
    def clazz(self):
        """
        Gets the clazz of this PluginMetaData.

        :return: The clazz of this PluginMetaData.
        :rtype: str
        """
        return self._clazz

    @clazz.setter
    def clazz(self, clazz):
        """
        Sets the clazz of this PluginMetaData.

        :param clazz: The clazz of this PluginMetaData.
        :type: str
        """

        self._clazz = clazz

    @property
    def configuration(self):
        """
        Gets the configuration of this PluginMetaData.

        :return: The configuration of this PluginMetaData.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this PluginMetaData.

        :param configuration: The configuration of this PluginMetaData.
        :type: str
        """

        self._configuration = configuration

    @property
    def created_time(self):
        """
        Gets the created_time of this PluginMetaData.

        :return: The created_time of this PluginMetaData.
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this PluginMetaData.

        :param created_time: The created_time of this PluginMetaData.
        :type: int
        """

        self._created_time = created_time

    @property
    def id(self):
        """
        Gets the id of this PluginMetaData.

        :return: The id of this PluginMetaData.
        :rtype: PluginId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PluginMetaData.

        :param id: The id of this PluginMetaData.
        :type: PluginId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PluginMetaData.

        :return: The name of this PluginMetaData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PluginMetaData.

        :param name: The name of this PluginMetaData.
        :type: str
        """

        self._name = name

    @property
    def public_access(self):
        """
        Gets the public_access of this PluginMetaData.

        :return: The public_access of this PluginMetaData.
        :rtype: bool
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """
        Sets the public_access of this PluginMetaData.

        :param public_access: The public_access of this PluginMetaData.
        :type: bool
        """

        self._public_access = public_access

    @property
    def state(self):
        """
        Gets the state of this PluginMetaData.

        :return: The state of this PluginMetaData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this PluginMetaData.

        :param state: The state of this PluginMetaData.
        :type: str
        """
        allowed_values = ["ACTIVE", "SUSPENDED"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this PluginMetaData.

        :return: The tenant_id of this PluginMetaData.
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this PluginMetaData.

        :param tenant_id: The tenant_id of this PluginMetaData.
        :type: TenantId
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PluginMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
