# coding: utf-8

"""
    Thingsboard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class WidgetTypeControllerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_widget_type_using_delete(self, widget_type_id, **kwargs):
        """
        deleteWidgetType
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_widget_type_using_delete(widget_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str widget_type_id: widgetTypeId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_widget_type_using_delete_with_http_info(widget_type_id, **kwargs)
        else:
            (data) = self.delete_widget_type_using_delete_with_http_info(widget_type_id, **kwargs)
            return data

    def delete_widget_type_using_delete_with_http_info(self, widget_type_id, **kwargs):
        """
        deleteWidgetType
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_widget_type_using_delete_with_http_info(widget_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str widget_type_id: widgetTypeId (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['widget_type_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_widget_type_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'widget_type_id' is set
        if ('widget_type_id' not in params) or (params['widget_type_id'] is None):
            raise ValueError("Missing the required parameter `widget_type_id` when calling `delete_widget_type_using_delete`")


        collection_formats = {}

        path_params = {}
        if 'widget_type_id' in params:
            path_params['widgetTypeId'] = params['widget_type_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/widgetType/{widgetTypeId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_widget_types_using_get(self, is_system, bundle_alias, **kwargs):
        """
        getBundleWidgetTypes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_widget_types_using_get(is_system, bundle_alias, async=True)
        >>> result = thread.get()

        :param async bool
        :param str is_system: isSystem (required)
        :param str bundle_alias: bundleAlias (required)
        :return: list[WidgetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bundle_widget_types_using_get_with_http_info(is_system, bundle_alias, **kwargs)
        else:
            (data) = self.get_bundle_widget_types_using_get_with_http_info(is_system, bundle_alias, **kwargs)
            return data

    def get_bundle_widget_types_using_get_with_http_info(self, is_system, bundle_alias, **kwargs):
        """
        getBundleWidgetTypes
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bundle_widget_types_using_get_with_http_info(is_system, bundle_alias, async=True)
        >>> result = thread.get()

        :param async bool
        :param str is_system: isSystem (required)
        :param str bundle_alias: bundleAlias (required)
        :return: list[WidgetType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_system', 'bundle_alias']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_widget_types_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_system' is set
        if ('is_system' not in params) or (params['is_system'] is None):
            raise ValueError("Missing the required parameter `is_system` when calling `get_bundle_widget_types_using_get`")
        # verify the required parameter 'bundle_alias' is set
        if ('bundle_alias' not in params) or (params['bundle_alias'] is None):
            raise ValueError("Missing the required parameter `bundle_alias` when calling `get_bundle_widget_types_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_system' in params:
            query_params.append(('isSystem', params['is_system']))
        if 'bundle_alias' in params:
            query_params.append(('bundleAlias', params['bundle_alias']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/widgetTypes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[WidgetType]',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_widget_type_by_id_using_get(self, widget_type_id, **kwargs):
        """
        getWidgetTypeById
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_widget_type_by_id_using_get(widget_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str widget_type_id: widgetTypeId (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_widget_type_by_id_using_get_with_http_info(widget_type_id, **kwargs)
        else:
            (data) = self.get_widget_type_by_id_using_get_with_http_info(widget_type_id, **kwargs)
            return data

    def get_widget_type_by_id_using_get_with_http_info(self, widget_type_id, **kwargs):
        """
        getWidgetTypeById
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_widget_type_by_id_using_get_with_http_info(widget_type_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str widget_type_id: widgetTypeId (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['widget_type_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_widget_type_by_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'widget_type_id' is set
        if ('widget_type_id' not in params) or (params['widget_type_id'] is None):
            raise ValueError("Missing the required parameter `widget_type_id` when calling `get_widget_type_by_id_using_get`")


        collection_formats = {}

        path_params = {}
        if 'widget_type_id' in params:
            path_params['widgetTypeId'] = params['widget_type_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/widgetType/{widgetTypeId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WidgetType',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_widget_type_using_get(self, is_system, bundle_alias, alias, **kwargs):
        """
        getWidgetType
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_widget_type_using_get(is_system, bundle_alias, alias, async=True)
        >>> result = thread.get()

        :param async bool
        :param str is_system: isSystem (required)
        :param str bundle_alias: bundleAlias (required)
        :param str alias: alias (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_widget_type_using_get_with_http_info(is_system, bundle_alias, alias, **kwargs)
        else:
            (data) = self.get_widget_type_using_get_with_http_info(is_system, bundle_alias, alias, **kwargs)
            return data

    def get_widget_type_using_get_with_http_info(self, is_system, bundle_alias, alias, **kwargs):
        """
        getWidgetType
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_widget_type_using_get_with_http_info(is_system, bundle_alias, alias, async=True)
        >>> result = thread.get()

        :param async bool
        :param str is_system: isSystem (required)
        :param str bundle_alias: bundleAlias (required)
        :param str alias: alias (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_system', 'bundle_alias', 'alias']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_widget_type_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_system' is set
        if ('is_system' not in params) or (params['is_system'] is None):
            raise ValueError("Missing the required parameter `is_system` when calling `get_widget_type_using_get`")
        # verify the required parameter 'bundle_alias' is set
        if ('bundle_alias' not in params) or (params['bundle_alias'] is None):
            raise ValueError("Missing the required parameter `bundle_alias` when calling `get_widget_type_using_get`")
        # verify the required parameter 'alias' is set
        if ('alias' not in params) or (params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `get_widget_type_using_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_system' in params:
            query_params.append(('isSystem', params['is_system']))
        if 'bundle_alias' in params:
            query_params.append(('bundleAlias', params['bundle_alias']))
        if 'alias' in params:
            query_params.append(('alias', params['alias']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/widgetType', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WidgetType',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_widget_type_using_post(self, widget_type, **kwargs):
        """
        saveWidgetType
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.save_widget_type_using_post(widget_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param WidgetType widget_type: widgetType (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.save_widget_type_using_post_with_http_info(widget_type, **kwargs)
        else:
            (data) = self.save_widget_type_using_post_with_http_info(widget_type, **kwargs)
            return data

    def save_widget_type_using_post_with_http_info(self, widget_type, **kwargs):
        """
        saveWidgetType
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.save_widget_type_using_post_with_http_info(widget_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param WidgetType widget_type: widgetType (required)
        :return: WidgetType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['widget_type']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_widget_type_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'widget_type' is set
        if ('widget_type' not in params) or (params['widget_type'] is None):
            raise ValueError("Missing the required parameter `widget_type` when calling `save_widget_type_using_post`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'widget_type' in params:
            body_params = params['widget_type']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['X-Authorization']

        return self.api_client.call_api('/api/widgetType', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='WidgetType',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
